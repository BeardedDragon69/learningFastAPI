from datetime import datetime, timedelta, timezone
from typing import Annotated
from fastapi import Depends, FastAPI, APIRouter, status, HTTPException, Path
from pydantic import BaseModel
from models import Users
from passlib.context import CryptContext
from sqlalchemy.orm import Session
from database import sessionLocal
from fastapi import FastAPI, Depends, status
from pydantic import BaseModel, Field
from sqlalchemy.orm import Session
from fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer
from jose import jwt, JWTError

# app = FastAPI() instead of this we have to write the line below 

router = APIRouter(
       prefix='/auth',
       tags=['auth']

)


#for the jwt to work create a secret key and algorithm

secretKey = 'a7a0dcb6a3adea2df22260da47d3db09f57994762022083150a4c21daa4497c1'
algorithm = 'HS256'

def getDb():
       db = sessionLocal()

       try:
              yield db
       finally:
              db.close()

       
dbDependencyInjection =  Annotated[Session, Depends(getDb)]

bcryptContext = CryptContext(schemes=['bcrypt'], deprecated = 'auto')
oAuth2Bearer = OAuth2PasswordBearer(tokenUrl='/auth/token')





#create a user basemodel for input validation

class CreateUser(BaseModel):
       username: str
       firstName: str
       lastName: str
       password: str
       email: str
       role: str

class Token(BaseModel):
       accessToken: str
       tokenName: str

def authenticateUser(username:str, password: str, db):
       user = db.query(Users).filter(Users.username == username).first()
       if not user: 
              return False
       if not bcryptContext.verify(password,user.hashedPassword):
              return False
       return user


def createAcessToken(userName: str, userId: int, expiresDelta: timedelta):
       encode = {'sub': userName, 'id': userId}
       expires = datetime.now(timezone.utc) + expiresDelta
       encode.update({'exp':expires.timestamp()})
       return jwt.encode(encode,secretKey,algorithm=algorithm)


async def getCurrentUser(token: Annotated[str, Depends(oAuth2Bearer)]):
       # try:
              payload = jwt.decode(token, secretKey, algorithms=[algorithm])
              userName: str = payload.get('sub')
              userId : int = payload.get('id')

              if userName is None or userId is None:
                     raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,
                                         detail="User cannot be verified")
              return{'username':userName, 'id':userId}
              
       # except JWTError:
       #        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,
       #                                   detail="User cannot be verified")



@router.post("/", status_code=status.HTTP_201_CREATED)
async def createUser(createUser: CreateUser, db: dbDependencyInjection):
       createUser = Users(
              email = createUser.email,
              username = createUser.username,
              firstName =  createUser.firstName,
              lastName = createUser.lastName,
              role = createUser.role,
              hashedPassword = bcryptContext.hash(createUser.password),
              isActive = True
       )

       db.add(createUser)
       db.commit()



@router.post("/token", response_model= Token)
async def loginAcessToken(formData: Annotated[OAuth2PasswordRequestForm, Depends()],
                          db: dbDependencyInjection):
       

       user = authenticateUser(formData.username, formData.password, db)
       if not user:
              raise HTTPException(status_code=400, detail='Invalid Username or password')
       
       token = createAcessToken(user.username,user.id, timedelta(minutes=5))
       print ("Generated Token:", token)

       return {'accessToken':token,'tokenName':'bearer'}


@router.get("/me")
async def getCurrentUserDetails(currentUser: Annotated[str, Depends(getCurrentUser)], db: dbDependencyInjection):
    """Fetch the currently authenticated user using the getCurrentUser function."""
    user = db.query(Users).filter(Users.username == currentUser["username"]).first()

    if not user:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")

    return {
        "username": user.username,
        "userId": user.id,
        "email": user.email,
        "firstName": user.firstName,
        "lastName": user.lastName,
        "role": user.role
    }










@router.get("/getuser/{userName}")
async def getUser(userName: str, db:dbDependencyInjection):
       foundUser = db.query(Users).filter(Users.username == userName).first()

       if foundUser:
              return foundUser
       else:
              return "user not found"